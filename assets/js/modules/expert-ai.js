// ========================================
// Expert AI Module - Ï†ÑÎ¨∏Í∞Ä Ïó≠Îüâ Í∞ïÌôî AI
// 2025 Í≥µÍ≥µÏ°∞Îã¨ AI ÌôúÏö© ÏïÑÏù¥ÎîîÏñ¥ Í≥µÎ™®Ï†Ñ
// ========================================

class ExpertAI {
  constructor() {
    this.moduleName = 'expert';
    this.moduleTitle = 'Ï†ÑÎ¨∏Í∞Ä Ïó≠Îüâ Í∞ïÌôî AI';
    this.isAnalyzing = false;
    this.currentUser = null;
    
    // ÏÇ¨Ïö©Ïûê Ïó≠Îüâ ÌèâÍ∞Ä Í∏∞Ï§Ä
    this.competencyAreas = {
      aiTechnology: {
        name: 'AI Í∏∞Ïà† Ïù¥Ìï¥ÎèÑ',
        weight: 0.25,
        maxScore: 100
      },
      esgEvaluation: {
        name: 'ESG ÌèâÍ∞Ä Îä•Î†•',
        weight: 0.20,
        maxScore: 100
      },
      negotiationSkills: {
        name: 'ÌòëÏÉÅ Ïä§ÌÇ¨',
        weight: 0.20,
        maxScore: 100
      },
      procurementKnowledge: {
        name: 'Ï°∞Îã¨ ÏßÄÏãù',
        weight: 0.20,
        maxScore: 100
      },
      digitalLiteracy: {
        name: 'ÎîîÏßÄÌÑ∏ ÌôúÏö© Îä•Î†•',
        weight: 0.15,
        maxScore: 100
      }
    };
    
    // ÌïôÏäµ ÏΩòÌÖêÏ∏† Îç∞Ïù¥ÌÑ∞
    this.learningContent = [
      {
        id: 'ai-basics',
        title: 'Ï°∞Îã¨ AI Í∏∞Ï¥à Í≥ºÏ†ï',
        duration: 120, // Î∂Ñ
        difficulty: 'beginner',
        requiredFor: ['aiTechnology'],
        description: 'AI Í∏∞Ïà†Ïùò Í∏∞Î≥∏ Í∞úÎÖêÍ≥º Ï°∞Îã¨ Î∂ÑÏïº Ï†ÅÏö© ÏÇ¨Î°Ä'
      },
      {
        id: 'esg-simulation',
        title: 'ESG ÌèâÍ∞Ä ÏãúÎÆ¨Î†àÏù¥ÏÖò',
        duration: 90,
        difficulty: 'intermediate',
        requiredFor: ['esgEvaluation'],
        description: 'Ïã§Ï†ú Ï°∞Îã¨ ÏÇ¨Î°ÄÎ•º ÌÜµÌïú ESG ÌèâÍ∞Ä Ïã§Ïäµ'
      },
      {
        id: 'negotiation-advanced',
        title: 'Í≥†Í∏â ÌòëÏÉÅ Ï†ÑÎûµ',
        duration: 180,
        difficulty: 'advanced',
        requiredFor: ['negotiationSkills'],
        description: 'Î≥µÏû°Ìïú Ï°∞Îã¨ ÏÉÅÌô©ÏóêÏÑúÏùò ÌòëÏÉÅ Í∏∞Î≤ï'
      }
    ];
    
    // Î©òÌÜ† Îç∞Ïù¥ÌÑ∞
    this.mentors = [
      {
        id: 'mentor-1',
        name: 'Ïù¥Ïó∞Í≤Ω',
        title: 'Ï°∞Îã¨ Ï†ÑÎ¨∏Í∞Ä',
        expertise: ['procurementKnowledge', 'negotiationSkills'],
        rating: 4.9,
        experience: 15
      },
      {
        id: 'mentor-2',
        name: 'ÍπÄAI',
        title: 'AI Ï†ÑÎ¨∏Í∞Ä',
        expertise: ['aiTechnology', 'digitalLiteracy'],
        rating: 4.8,
        experience: 8
      },
      {
        id: 'mentor-3',
        name: 'Î∞ïESG',
        title: 'ESG Ïª®ÏÑ§ÌÑ¥Ìä∏',
        expertise: ['esgEvaluation'],
        rating: 4.9,
        experience: 12
      }
    ];
  }
  
  // ========================================
  // ÏÇ¨Ïö©Ïûê Ïó≠Îüâ ÌèâÍ∞Ä
  // ========================================
  
  async evaluateUserCompetency(userData) {
    console.log('üë®‚Äçüéì Ï†ÑÎ¨∏Í∞Ä Ïó≠Îüâ ÌèâÍ∞Ä ÏãúÏûë:', userData);
    
    // AI Î∂ÑÏÑù ÏãúÎÆ¨Î†àÏù¥ÏÖò
    await this.simulateAnalysis();
    
    // Ïó≠Îüâ Ï†êÏàò Í≥ÑÏÇ∞
    const competencyScores = this.calculateCompetencyScores(userData);
    
    // Ï¢ÖÌï© Ï†êÏàò Í≥ÑÏÇ∞
    const totalScore = this.calculateTotalScore(competencyScores);
    
    // Í∞úÏÑ† ÏòÅÏó≠ ÏãùÎ≥Ñ
    const improvementAreas = this.identifyImprovementAreas(competencyScores);
    
    // ÎßûÏ∂§ ÌïôÏäµ ÏΩòÌÖêÏ∏† Ï∂îÏ≤ú
    const recommendedContent = this.recommendLearningContent(improvementAreas);
    
    // Î©òÌÜ† Îß§Ïπ≠
    const matchedMentor = this.matchMentor(improvementAreas);
    
    return {
      user: userData,
      competencyScores,
      totalScore,
      improvementAreas,
      recommendedContent,
      matchedMentor,
      progressPlan: this.generateProgressPlan(improvementAreas),
      timestamp: new Date().toISOString()
    };
  }
  
  calculateCompetencyScores(userData) {
    const scores = {};
    
    // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî ÏÇ¨Ïö©ÏûêÏùò Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞, ÌÖåÏä§Ìä∏ Í≤∞Í≥º Îì±ÏùÑ Î∂ÑÏÑù
    // Ïó¨Í∏∞ÏÑúÎäî Îç∞Î™®Ïö© ÏãúÎÆ¨Î†àÏù¥ÏÖò
    Object.keys(this.competencyAreas).forEach(area => {
      // ÎûúÎç§ + ÏïΩÍ∞ÑÏùò Î°úÏßÅÏúºÎ°ú ÌòÑÏã§Ï†ÅÏù∏ Ï†êÏàò ÏÉùÏÑ±
      let baseScore = 40 + Math.random() * 40; // 40-80 Í∏∞Î≥∏ Î≤îÏúÑ
      
      // ÏÇ¨Ïö©Ïûê Í≤ΩÌóòÏóê Îî∞Î•∏ Î≥¥Ï†ï
      if (userData.experience) {
        baseScore += Math.min(userData.experience * 2, 20);
      }
      
      // ÌäπÏ†ï ÏòÅÏó≠Î≥Ñ Ï°∞Ï†ï
      if (area === 'aiTechnology' && userData.techBackground) {
        baseScore += 15;
      }
      if (area === 'procurementKnowledge' && userData.procurementYears) {
        baseScore += userData.procurementYears * 3;
      }
      
      scores[area] = Math.min(Math.round(baseScore), 100);
    });
    
    return scores;
  }
  
  calculateTotalScore(competencyScores) {
    let weightedSum = 0;
    let totalWeight = 0;
    
    Object.keys(competencyScores).forEach(area => {
      const weight = this.competencyAreas[area].weight;
      weightedSum += competencyScores[area] * weight;
      totalWeight += weight;
    });
    
    return Math.round(weightedSum / totalWeight);
  }
  
  identifyImprovementAreas(competencyScores) {
    return Object.keys(competencyScores)
      .filter(area => competencyScores[area] < 70)
      .sort((a, b) => competencyScores[a] - competencyScores[b])
      .map(area => ({
        area,
        name: this.competencyAreas[area].name,
        currentScore: competencyScores[area],
        targetScore: 85,
        priority: competencyScores[area] < 50 ? 'high' : 'medium'
      }));
  }
  
  recommendLearningContent(improvementAreas) {
    const recommendations = [];
    
    improvementAreas.forEach(improvement => {
      const relevantContent = this.learningContent.filter(content => 
        content.requiredFor.includes(improvement.area)
      );
      
      recommendations.push(...relevantContent.map(content => ({
        ...content,
        relevantFor: improvement.area,
        priority: improvement.priority,
        expectedImprovement: this.calculateExpectedImprovement(content, improvement)
      })));
    });
    
    return recommendations
      .sort((a, b) => {
        if (a.priority !== b.priority) {
          return a.priority === 'high' ? -1 : 1;
        }
        return b.expectedImprovement - a.expectedImprovement;
      })
      .slice(0, 3); // ÏÉÅÏúÑ 3Í∞ú Ï∂îÏ≤ú
  }
  
  calculateExpectedImprovement(content, improvement) {
    let baseImprovement = 10;
    
    if (content.difficulty === 'beginner' && improvement.currentScore < 50) {
      baseImprovement = 20;
    } else if (content.difficulty === 'intermediate' && improvement.currentScore < 70) {
      baseImprovement = 15;
    } else if (content.difficulty === 'advanced' && improvement.currentScore >= 70) {
      baseImprovement = 12;
    }
    
    return Math.min(baseImprovement, 100 - improvement.currentScore);
  }
  
  matchMentor(improvementAreas) {
    if (improvementAreas.length === 0) {
      return null;
    }
    
    const primaryArea = improvementAreas[0].area;
    
    // Ìï¥Îãπ ÏòÅÏó≠ Ï†ÑÎ¨∏Í∞Ä Î©òÌÜ† Ï∞æÍ∏∞
    const suitableMentors = this.mentors.filter(mentor => 
      mentor.expertise.includes(primaryArea)
    );
    
    if (suitableMentors.length === 0) {
      return this.mentors[0]; // Í∏∞Î≥∏ Î©òÌÜ†
    }
    
    // ÌèâÏ†êÍ≥º Í≤ΩÌóòÏùÑ Í≥†Î†§Ìï¥ÏÑú ÏµúÏ†Å Î©òÌÜ† ÏÑ†ÌÉù
    return suitableMentors.sort((a, b) => {
      const scoreA = a.rating * 0.7 + (a.experience / 20) * 0.3;
      const scoreB = b.rating * 0.7 + (b.experience / 20) * 0.3;
      return scoreB - scoreA;
    })[0];
  }
  
  generateProgressPlan(improvementAreas) {
    if (improvementAreas.length === 0) {
      return {
        totalWeeks: 4,
        weeklyGoals: [
          { week: 1, goal: 'ÌòÑÏû¨ Ïó≠Îüâ Ïú†ÏßÄ Î∞è Ïã¨Ìôî ÌïôÏäµ' },
          { week: 2, goal: 'ÏÉàÎ°úÏö¥ Ìä∏Î†åÎìú Î∞è Í∏∞Ïà† ÌïôÏäµ' },
          { week: 3, goal: 'Ïã§Î¨¥ Ï†ÅÏö© Î∞è ÌîºÎìúÎ∞±' },
          { week: 4, goal: 'Ï¢ÖÌï© ÌèâÍ∞Ä Î∞è Îã§Ïùå Í≥ÑÌöç ÏàòÎ¶Ω' }
        ]
      };
    }
    
    const totalWeeks = Math.max(4, improvementAreas.length * 2);
    const weeklyGoals = [];
    
    let currentWeek = 1;
    improvementAreas.forEach((improvement, index) => {
      const weeksForArea = Math.ceil(totalWeeks / improvementAreas.length);
      
      for (let i = 0; i < weeksForArea && currentWeek <= totalWeeks; i++) {
        let goal;
        if (i === 0) {
          goal = `${improvement.name} Í∏∞Ï¥à ÌïôÏäµ ÏãúÏûë`;
        } else if (i === weeksForArea - 1) {
          goal = `${improvement.name} Ïã§Î¨¥ Ï†ÅÏö© Î∞è ÌèâÍ∞Ä`;
        } else {
          goal = `${improvement.name} Ïã¨Ìôî ÌïôÏäµ Í≥ÑÏÜç`;
        }
        
        weeklyGoals.push({
          week: currentWeek,
          goal,
          targetArea: improvement.area
        });
        
        currentWeek++;
      }
    });
    
    return {
      totalWeeks,
      weeklyGoals
    };
  }
  
  // ========================================
  // ÏßÑÌñâ ÏÉÅÌô© Ï∂îÏ†Å
  // ========================================
  
  async trackProgress(userId, activityData) {
    // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•
    const progress = {
      userId,
      date: new Date().toISOString(),
      activity: activityData,
      learningHours: activityData.duration || 0,
      completedModules: activityData.completedModules || [],
      assessmentScores: activityData.assessmentScores || {},
      mentorFeedback: activityData.mentorFeedback || null
    };
    
    console.log('üìà ÌïôÏäµ ÏßÑÌñâÏÉÅÌô© ÏóÖÎç∞Ïù¥Ìä∏:', progress);
    
    return progress;
  }
  
  calculateWeeklyStats(progressHistory) {
    const thisWeek = progressHistory.filter(entry => {
      const entryDate = new Date(entry.date);
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      return entryDate >= weekAgo;
    });
    
    const totalHours = thisWeek.reduce((sum, entry) => sum + entry.learningHours, 0);
    const completedModules = new Set();
    thisWeek.forEach(entry => {
      entry.completedModules.forEach(module => completedModules.add(module));
    });
    
    const achievementRate = Math.min((totalHours / 10) * 100, 100); // Ï£ºÎãπ 10ÏãúÍ∞Ñ Î™©Ìëú
    
    return {
      learningHours: totalHours,
      completedModules: completedModules.size,
      achievementRate: Math.round(achievementRate),
      trend: totalHours > 8 ? 'excellent' : totalHours > 5 ? 'good' : 'needs_improvement'
    };
  }
  
  // ========================================
  // UI ÏÉùÏÑ± Î©îÏÑúÎìúÎì§
  // ========================================
  
  generateUserDashboardHTML(evaluationResult) {
    const { user, competencyScores, totalScore, improvementAreas, recommendedContent, matchedMentor, progressPlan } = evaluationResult;
    
    return `
      <div class="expert-dashboard">
        <div class="dashboard-header">
          <div class="user-profile">
            <div class="user-avatar">
              <i class="fas fa-user-tie"></i>
            </div>
            <div class="user-info">
              <h3>${user.name || 'ÍπÄÏ°∞Îã¨'}</h3>
              <p>${user.position || 'Ï§ëÍ∏â Ï°∞Îã¨ Îã¥ÎãπÏûê'}</p>
              <div class="total-score">
                <span class="score-label">Ï¢ÖÌï© Ïó≠Îüâ</span>
                <span class="score-value ${this.getScoreClass(totalScore)}">${totalScore}Ï†ê</span>
              </div>
            </div>
          </div>
        </div>
        
        <div class="competency-radar">
          <h4>ÏòÅÏó≠Î≥Ñ Ïó≠Îüâ Î∂ÑÏÑù</h4>
          <div class="radar-chart" id="competencyRadar"></div>
          <div class="competency-details">
            ${Object.keys(competencyScores).map(area => `
              <div class="competency-item">
                <span class="area-name">${this.competencyAreas[area].name}</span>
                <div class="score-bar">
                  <div class="score-fill ${this.getScoreClass(competencyScores[area])}" 
                       style="width: ${competencyScores[area]}%"></div>
                  <span class="score-text">${competencyScores[area]}Ï†ê</span>
                </div>
              </div>
            `).join('')}
          </div>
        </div>
        
        ${improvementAreas.length > 0 ? `
          <div class="improvement-areas">
            <h4>Í∞úÏÑ† ÌïÑÏöî ÏòÅÏó≠</h4>
            ${improvementAreas.map(area => `
              <div class="improvement-item ${area.priority}">
                <div class="area-info">
                  <span class="area-name">${area.name}</span>
                  <span class="priority-badge ${area.priority}">${area.priority === 'high' ? 'Í∏¥Í∏â' : 'Î≥¥ÌÜµ'}</span>
                </div>
                <div class="score-progress">
                  <span class="current">${area.currentScore}Ï†ê</span>
                  <div class="progress-arrow">‚Üí</div>
                  <span class="target">${area.targetScore}Ï†ê</span>
                </div>
              </div>
            `).join('')}
          </div>
        ` : ''}
        
        <div class="recommended-content">
          <h4>ÎßûÏ∂§ ÌïôÏäµ ÏΩòÌÖêÏ∏†</h4>
          ${recommendedContent.map(content => `
            <div class="content-item">
              <div class="content-header">
                <h5>${content.title}</h5>
                <span class="duration">${content.duration}Î∂Ñ</span>
              </div>
              <p class="content-description">${content.description}</p>
              <div class="content-meta">
                <span class="difficulty ${content.difficulty}">${this.getDifficultyText(content.difficulty)}</span>
                <span class="improvement">+${content.expectedImprovement}Ï†ê Ìñ•ÏÉÅ ÏòàÏÉÅ</span>
              </div>
              <button class="btn btn-primary btn-small" onclick="startLearning('${content.id}')">
                <i class="fas fa-play"></i> ÌïôÏäµ ÏãúÏûë
              </button>
            </div>
          `).join('')}
        </div>
        
        ${matchedMentor ? `
          <div class="mentor-matching">
            <h4>Ï∂îÏ≤ú Î©òÌÜ†</h4>
            <div class="mentor-card">
              <div class="mentor-info">
                <div class="mentor-avatar">
                  <i class="fas fa-user-graduate"></i>
                </div>
                <div class="mentor-details">
                  <h5>${matchedMentor.name}</h5>
                  <p>${matchedMentor.title}</p>
                  <div class="mentor-rating">
                    <div class="stars">
                      ${this.generateStars(matchedMentor.rating)}
                    </div>
                    <span class="rating-text">${matchedMentor.rating}</span>
                  </div>
                </div>
              </div>
              <div class="mentor-expertise">
                <span class="expertise-label">Ï†ÑÎ¨∏ Î∂ÑÏïº:</span>
                ${matchedMentor.expertise.map(exp => 
                  `<span class="expertise-tag">${this.competencyAreas[exp]?.name || exp}</span>`
                ).join('')}
              </div>
              <button class="btn btn-outline btn-small" onclick="connectMentor('${matchedMentor.id}')">
                <i class="fas fa-handshake"></i> Î©òÌÜ†ÎßÅ Ïã†Ï≤≠
              </button>
            </div>
          </div>
        ` : ''}
        
        <div class="progress-plan">
          <h4>ÌïôÏäµ Í≥ÑÌöç (${progressPlan.totalWeeks}Ï£º)</h4>
          <div class="timeline">
            ${progressPlan.weeklyGoals.map((goal, index) => `
              <div class="timeline-item ${index === 0 ? 'current' : ''}">
                <div class="week-number">${goal.week}Ï£ºÏ∞®</div>
                <div class="week-goal">${goal.goal}</div>
              </div>
            `).join('')}
          </div>
        </div>
      </div>
    `;
  }
  
  // ========================================
  // Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìúÎì§
  // ========================================
  
  async simulateAnalysis() {
    // AI Î∂ÑÏÑù ÏãúÎÆ¨Î†àÏù¥ÏÖò (Îã®Í≥ÑÎ≥Ñ ÏßÑÌñâ)
    const steps = [
      'ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Ï§ë...',
      'Ïó≠Îüâ ÌèâÍ∞Ä Í∏∞Ï§Ä Ï†ÅÏö© Ï§ë...',
      'Í∞úÏÑ† ÏòÅÏó≠ ÏãùÎ≥Ñ Ï§ë...',
      'ÎßûÏ∂§ ÏΩòÌÖêÏ∏† Í≤ÄÏÉâ Ï§ë...',
      'Î©òÌÜ† Îß§Ïπ≠ Ï§ë...'
    ];
    
    for (let i = 0; i < steps.length; i++) {
      console.log(`üë®‚Äçüéì ${steps[i]}`);
      await new Promise(resolve => setTimeout(resolve, 800));
    }
  }
  
  getScoreClass(score) {
    if (score >= 80) return 'excellent';
    if (score >= 70) return 'good';
    if (score >= 60) return 'fair';
    return 'poor';
  }
  
  getDifficultyText(difficulty) {
    const map = {
      'beginner': 'Ï¥àÍ∏â',
      'intermediate': 'Ï§ëÍ∏â',
      'advanced': 'Í≥†Í∏â'
    };
    return map[difficulty] || difficulty;
  }
  
  generateStars(rating) {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
    
    let stars = '';
    for (let i = 0; i < fullStars; i++) {
      stars += '<i class="fas fa-star"></i>';
    }
    if (hasHalfStar) {
      stars += '<i class="fas fa-star-half-alt"></i>';
    }
    for (let i = 0; i < emptyStars; i++) {
      stars += '<i class="far fa-star"></i>';
    }
    
    return stars;
  }
}

// Ï†ÑÏó≠ Ìï®ÏàòÎì§ (UIÏóêÏÑú Ìò∏Ï∂ú)
window.startLearning = function(contentId) {
  console.log('üìö ÌïôÏäµ ÏãúÏûë:', contentId);
  // Ïã§Ï†úÎ°úÎäî ÌïôÏäµ Î™®Îìà ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌïòÍ±∞ÎÇò Î™®Îã¨ ÌëúÏãú
  alert(`"${contentId}" ÌïôÏäµÏùÑ ÏãúÏûëÌï©ÎãàÎã§!`);
};

window.connectMentor = function(mentorId) {
  console.log('ü§ù Î©òÌÜ† Ïó∞Í≤∞:', mentorId);
  // Ïã§Ï†úÎ°úÎäî Î©òÌÜ†ÎßÅ Ïã†Ï≤≠ ÌîÑÎ°úÏÑ∏Ïä§ ÏãúÏûë
  alert('Î©òÌÜ†ÎßÅ Ïã†Ï≤≠Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
};

// Î™®Îìà ÎÇ¥Î≥¥ÎÇ¥Í∏∞
if (typeof module !== 'undefined' && module.exports) {
  module.exports = ExpertAI;
} else {
  window.ExpertAI = ExpertAI;
}
